{"version":3,"sources":["components/Header/index.js","components/App/index.js","serviceWorker.js","reducers/counter.js","actions/index.js","reducers/index.js","middleware/logMiddleware.js","store/index.js","index.js"],"names":["connect","className","App","Header","Boolean","window","location","hostname","match","initialState","name","value","counter","state","action","type","combineReducers","logMiddleware","store","next","console","log","getState","enhancers","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","compose","applyMiddleware","createStore","rootReducer","rootReactElement","target","document","getElementById","render","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"mPAwCeA,G,YAAAA,YAjBE,KAEG,KAeLA,EA7BC,kBACd,4BAAQC,UAAU,UAChB,wBAAIA,UAAU,gBAAd,0BCEWC,G,MAPH,kBACV,yBAAKD,UAAU,OACb,kBAACE,EAAD,SCEgBC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,kBChBAC,EAAe,CACnBC,KAAM,cACNC,MAAO,GAoBMC,EAjBC,WAAwC,IAAvCC,EAAsC,uDAA9BJ,EAAcK,EAAgB,uDAAP,GAC9C,OAAQA,EAAOC,MACb,ICT6B,oBDU3B,OAAO,eACFF,EADL,CAEEF,MAAOE,EAAMF,MAAQ,IAEzB,ICb6B,oBDc3B,OAAO,eACFE,EADL,CAEEF,MAAOE,EAAMF,MAAQ,IAEzB,QACE,OAAOE,IEjBEG,cAAgB,CAC7BJ,YCEaK,EANO,SAACC,GAAD,OAAW,SAACC,GAAD,OAAU,SAACL,GAC1CM,QAAQC,IAAIH,EAAMI,YAClBF,QAAQC,IAAI,kCAAmCP,GAC/CK,EAAKL,MCODS,GAFmBlB,OAAOmB,sCAAwCC,KAGtEC,YACET,IAaWC,EAPDS,YACZC,EAEAL,GCXIM,EACJ,kBAAC,IAAD,CAAUX,MAAOA,GACf,kBAAC,EAAD,OAIEY,EAASC,SAASC,eAAe,QAEvCC,iBAAOJ,EAAkBC,GNiHnB,kBAAmBI,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLrB,QAAQqB,MAAMA,EAAMC,c","file":"static/js/main.3ea59ad2.chunk.js","sourcesContent":["// == Import : npm\nimport React from 'react';\n// import PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\n\n// import { increment, decrement } from '../../actions';\n\n// == Import : local\nimport './styles.scss';\n\n// == Composant\nconst Counter = () => (\n  <header className=\"header\">\n    <h1 className=\"header-title\">Quentin Tavernari</h1>\n  </header>\n);\n\nCounter.propTypes = {\n  // count: PropTypes.number.isRequired,\n  // increment: PropTypes.func.isRequired,\n  // decrement: PropTypes.func.isRequired,\n};\n\nconst mapState = null;\n\nconst mapDispatch = null;\n\n// const mapState = (state) => ({\n//   count: state.counter.value,\n// });\n\n// const mapDispatch = (dispatch) => ({\n//   increment: () => {\n//     dispatch(increment());\n//   },\n//   decrement: () => {\n//     dispatch(decrement());\n//   },\n// });\n\nexport default connect(\n  mapState,\n  mapDispatch,\n)(Counter);\n","// == Import npm\nimport React from 'react';\n\n// == Import\nimport Header from '../Header';\nimport './styles.css';\n\n// == Composant\nconst App = () => (\n  <div className=\"app\">\n    <Header />\n  </div>\n);\n\n// == Export\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import { INCREMENT_COUNTER, DECREMENT_COUNTER } from '../actions';\n\nconst initialState = {\n  name: 'The Counter',\n  value: 0,\n};\n\nconst counter = (state = initialState, action = {}) => {\n  switch (action.type) {\n    case INCREMENT_COUNTER:\n      return {\n        ...state,\n        value: state.value + 1,\n      };\n    case DECREMENT_COUNTER:\n      return {\n        ...state,\n        value: state.value - 1,\n      };\n    default:\n      return state;\n  }\n};\n\nexport default counter;\n","export const INCREMENT_COUNTER = 'INCREMENT_COUNTER';\nexport const DECREMENT_COUNTER = 'DECREMENT_COUNTER';\n\nexport const increment = () => ({\n  type: INCREMENT_COUNTER,\n});\n\nexport const decrement = () => ({\n  type: DECREMENT_COUNTER,\n});\n","import { combineReducers } from 'redux';\nimport counter from './counter';\n\nexport default combineReducers({\n  counter,\n});\n","const logMiddleware = (store) => (next) => (action) => {\n  console.log(store.getState());\n  console.log('Je laisse passer cette action: ', action);\n  next(action);\n};\n\nexport default logMiddleware;\n","// == Import : npm\nimport { createStore, compose, applyMiddleware } from 'redux';\n\n// == Import : local\nimport rootReducer from '../reducers';\nimport logMiddleware from '../middleware/logMiddleware';\n\n// == Enhancers\nconst composeEnhancers = window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ || compose;\n\nconst enhancers = composeEnhancers(\n  applyMiddleware(\n    logMiddleware,\n    // secondMiddleware,\n  ),\n);\n\n// == Store\nconst store = createStore(\n  rootReducer,\n  // preloadedState,\n  enhancers,\n);\n\n// == Export\nexport default store;\n","import React from 'react';\nimport { render } from 'react-dom';\nimport { Provider } from 'react-redux';\n\nimport './index.css';\nimport App from './components/App';\nimport * as serviceWorker from './serviceWorker';\n\nimport store from './store';\n\nconst rootReactElement = (\n  <Provider store={store}>\n    <App />\n  </Provider>\n);\n\nconst target = document.getElementById('root');\n\nrender(rootReactElement, target);\n\nserviceWorker.unregister();\n"],"sourceRoot":""}